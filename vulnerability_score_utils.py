import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns


def find_neighbors_within_k_in_train(experiment, orig_df, aux_df, index, orig_sens_pred, k=4):
    train_df = orig_df.copy()
    # test_df = test_df.drop([experiment.sensitive_column], axis=1)
    train_df = train_df.drop([experiment.y_column], axis=1)

    # test_df = aux_df.copy()
    train_df = train_df.drop([experiment.sensitive_column], axis=1)
    # train_df = train_df.drop([experiment.y_column], axis=1)

    aux_np = aux_df.drop([experiment.y_column, experiment.sensitive_column], axis=1).to_numpy()
    aux_np = aux_np.astype(np.float32)
    aux_np = np.expand_dims(aux_np, 0)

    temp_np = train_df.to_numpy()[index:index+1, :]
    # temp_np[:, 3] = orig_sens_pred
    # sensitive_column_index = orig_df.columns.tolist().index(experiment.sensitive_column)
    # temp_np[:, sensitive_column_index] = orig_sens_pred
    temp_np = temp_np.astype(np.float32)
    temp_np_2 = np.expand_dims(temp_np, 1)
    
    dist_matrix = np.count_nonzero(aux_np - temp_np_2, axis=2).ravel()
    # print(dist_matrix)
    
    return dist_matrix <= k



def get_vulnerability_score(experiment, X, y, orig_df, index, k=3):
    dist_2_neighbours = find_neighbors_within_k_in_train(experiment, orig_df, orig_df, index, 1, k=k)
    X_temp = X.iloc[dist_2_neighbours]
    orig_y = y[index]
    dist_2_neighbours_y_values = y[dist_2_neighbours].ravel().astype(np.float)
    # print(dist_2_neighbours_y_values)
    dist_2_neighbours_w_same_y_indices = (orig_y == dist_2_neighbours_y_values)
    sensitive_column_index = orig_df.columns.tolist().index(experiment.sensitive_column)
    orig_sens_val = X.iloc[index][f'{experiment.ds.ds.meta["sensitive_column"]}_1']
    return (X_temp.iloc[dist_2_neighbours_w_same_y_indices][f'{experiment.ds.ds.meta["sensitive_column"]}_1'] == orig_sens_val).mean()


def draw_hist_plot(all_vuln_scores, correct_indices, incorrect_indices):
    fig, ax = plt.subplots()
    sns.histplot(all_vuln_scores[correct_indices], label='Correctly predicted examples', element='bars', stat='count', bins=25, linewidth=0.25, alpha=0.5, color="grey", hatch='..', edgecolor='grey')
    sns.histplot(all_vuln_scores[incorrect_indices], label='Incorrectly predicted examples', element='bars', stat='count', bins=25, linewidth=0.25, alpha=0.25, color="black", hatch='//', edgecolor=(0.4, 0.4, 0.4))
    plt.xlabel('Vulnerability Score')
    plt.ylabel('Count')
    plt.grid(True, linestyle='-', linewidth=0.25, axis='x')
    # plt.title('Distribution of Predicted neighborhood similarity among k=4 dist neighbours from synthetic data for case 1 examples')
    # plt.legend()
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles, labels)
    sns.despine()
    plt.show()